// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	sharesies "github.com/deividfortuna/sharesies"
	mock "github.com/stretchr/testify/mock"
)

// ExchangeClient is an autogenerated mock type for the ExchangeClient type
type ExchangeClient struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: ctx, creds
func (_m *ExchangeClient) Authenticate(ctx context.Context, creds *sharesies.Credentials) (*sharesies.ProfileResponse, error) {
	ret := _m.Called(ctx, creds)

	var r0 *sharesies.ProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sharesies.Credentials) *sharesies.ProfileResponse); ok {
		r0 = rf(ctx, creds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharesies.ProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sharesies.Credentials) error); ok {
		r1 = rf(ctx, creds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Buy provides a mock function with given fields: ctx, costBuy
func (_m *ExchangeClient) Buy(ctx context.Context, costBuy *sharesies.CostBuyResponse) (*sharesies.ProfileResponse, error) {
	ret := _m.Called(ctx, costBuy)

	var r0 *sharesies.ProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sharesies.CostBuyResponse) *sharesies.ProfileResponse); ok {
		r0 = rf(ctx, costBuy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharesies.ProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sharesies.CostBuyResponse) error); ok {
		r1 = rf(ctx, costBuy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CostBuy provides a mock function with given fields: ctx, fundId, amount
func (_m *ExchangeClient) CostBuy(ctx context.Context, fundId string, amount float64) (*sharesies.CostBuyResponse, error) {
	ret := _m.Called(ctx, fundId, amount)

	var r0 *sharesies.CostBuyResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *sharesies.CostBuyResponse); ok {
		r0 = rf(ctx, fundId, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharesies.CostBuyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, float64) error); ok {
		r1 = rf(ctx, fundId, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CostSell provides a mock function with given fields: ctx, foundId, shareAmount
func (_m *ExchangeClient) CostSell(ctx context.Context, foundId string, shareAmount float64) (*sharesies.CostSellResponse, error) {
	ret := _m.Called(ctx, foundId, shareAmount)

	var r0 *sharesies.CostSellResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *sharesies.CostSellResponse); ok {
		r0 = rf(ctx, foundId, shareAmount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharesies.CostSellResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, float64) error); ok {
		r1 = rf(ctx, foundId, shareAmount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sell provides a mock function with given fields: ctx, sellBuy
func (_m *ExchangeClient) Sell(ctx context.Context, sellBuy *sharesies.CostSellResponse) (*sharesies.ProfileResponse, error) {
	ret := _m.Called(ctx, sellBuy)

	var r0 *sharesies.ProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sharesies.CostSellResponse) *sharesies.ProfileResponse); ok {
		r0 = rf(ctx, sellBuy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharesies.ProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sharesies.CostSellResponse) error); ok {
		r1 = rf(ctx, sellBuy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
